diff --git a/server/index.js b/server/index.js
index XXXXXXX..YYYYYYY 100644
--- a/server/index.js
+++ b/server/index.js
@@ -<line_post_invoices_insert> ,+<num> @@
-// Existing POST /api/invoices handler; replace with updated version
-app.post('/api/invoices', async (req, res) => {
-  // ... old code
-});
+// CREATE invoice + items
+app.post('/api/invoices', async (req, res) => {
+  console.log('POST /api/invoices req.body:', JSON.stringify(req.body, null, 2));
+
+  const conn = await pool.getConnection();
+  try {
+    await conn.beginTransaction();
+
+    const { invoice_no, party_id, invoice_date, items = [], notes } = req.body;
+
+    let total = 0;
+    for (const it of items) {
+      const qty = Number(it.qty || 0);
+      const unit_price = Number(it.unit_price ?? it.price ?? 0);
+      const discount = Number(it.discount || 0);
+      total += (unit_price * qty) - discount;
+    }
+
+    // lookup party name if needed
+    let customer_name = null;
+    if (party_id) {
+      try {
+        const [[p]] = await conn.query('SELECT name FROM parties WHERE id = ?', [party_id]);
+        if (p) customer_name = p.name;
+      } catch (_) {}
+    }
+
+    const [r] = await conn.query(
+      `INSERT INTO invoices
+         (invoice_no, customer_name, invoice_date, total, received, party_id, created_at)
+       VALUES (?, ?, ?, ?, ?, ?, NOW())`,
+      [invoice_no || null, customer_name, invoice_date || null, total, 0, party_id || null]
+    );
+
+    const invoiceId = r.insertId;
+
+    for (const it of items) {
+      const qty = Number(it.qty || 0);
+      const unit_price = Number(it.unit_price ?? it.price ?? 0);
+      const discount = Number(it.discount || 0);
+      const amount = (unit_price * qty) - discount;
+      const itemId = it.item_id ? Number(it.item_id) : null;
+      const name = it.item_name || it.name || '';
+
+      await conn.query(
+        `INSERT INTO invoice_items (invoice_id, item_id, name, qty, unit_price, discount, amount, created_at)
+         VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`,
+        [invoiceId, itemId, name, qty, unit_price, discount, amount]
+      );
+    }
+
+    await conn.commit();
+
+    const [[newInv]] = await pool.query('SELECT * FROM invoices WHERE id = ?', [invoiceId]);
+    const [newItems] = await pool.query('SELECT * FROM invoice_items WHERE invoice_id = ?', [invoiceId]);
+    newInv.items = newItems;
+
+    res.status(201).json(newInv);
+  } catch (err) {
+    await conn.rollback();
+    console.error('POST /api/invoices error:', err);
+    res.status(500).json({ error: err.sqlMessage || err.message || 'Failed to create invoice' });
+  } finally {
+    conn.release();
+  }
+});
+
+// UPDATE invoice + items
+app.put('/api/invoices/:id', async (req, res) => {
+  const id = req.params.id;
+  console.log(`PUT /api/invoices/${id} body:`, JSON.stringify(req.body, null, 2));
+
+  const conn = await pool.getConnection();
+  try {
+    await conn.beginTransaction();
+
+    const { invoice_no, party_id, invoice_date, items = [], notes } = req.body;
+
+    let total = 0;
+    for (const it of items) {
+      const qty = Number(it.qty || 0);
+      const unit_price = Number(it.unit_price ?? it.price ?? 0);
+      const discount = Number(it.discount || 0);
+      total += (unit_price * qty) - discount;
+    }
+
+    await conn.query(
+      `UPDATE invoices SET invoice_no = ?, invoice_date = ?, total = ?, party_id = ? WHERE id = ?`,
+      [invoice_no || null, invoice_date || null, total, party_id || null, id]
+    );
+
+    await conn.query('DELETE FROM invoice_items WHERE invoice_id = ?', [id]);
+
+    for (const it of items) {
+      const qty = Number(it.qty || 0);
+      const unit_price = Number(it.unit_price ?? it.price ?? 0);
+      const discount = Number(it.discount || 0);
+      const amount = (unit_price * qty) - discount;
+      const itemId = it.item_id ? Number(it.item_id) : null;
+      const name = it.item_name || it.name || '';
+
+      await conn.query(
+        `INSERT INTO invoice_items (invoice_id, item_id, name, qty, unit_price, discount, amount, created_at)
+         VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`,
+        [id, itemId, name, qty, unit_price, discount, amount]
+      );
+    }
+
+    await conn.commit();
+
+    const [[updatedInv]] = await pool.query('SELECT * FROM invoices WHERE id = ?', [id]);
+    const [updatedItems] = await pool.query('SELECT * FROM invoice_items WHERE invoice_id = ?', [id]);
+    updatedInv.items = updatedItems;
+
+    res.json(updatedInv);
+  } catch (err) {
+    await conn.rollback();
+    console.error(`PUT /api/invoices/${id} error:`, err);
+    res.status(500).json({ error: err.sqlMessage || err.message || 'Failed to update invoice' });
+  } finally {
+    conn.release();
+  }
+});
+
+// DELETE invoice
+app.delete('/api/invoices/:id', async (req, res) => {
+  const id = req.params.id;
+  const conn = await pool.getConnection();
+  try {
+    await conn.beginTransaction();
+    await conn.query('DELETE FROM invoice_items WHERE invoice_id = ?', [id]);
+    const [r] = await conn.query('DELETE FROM invoices WHERE id = ?', [id]);
+    await conn.commit();
+    if (r.affectedRows === 0) {
+      return res.status(404).json({ error: 'Invoice not found' });
+    }
+    res.json({ ok: true });
+  } catch (err) {
+    await conn.rollback();
+    console.error(`DELETE /api/invoices/${id} error:`, err);
+    res.status(500).json({ error: err.sqlMessage || err.message || 'Failed to delete invoice' });
+  } finally {
+    conn.release();
+  }
+});
 diff --git a/src/api/index.js b/src/api/index.js
index AAAAAAA..BBBBBBB 100644
--- a/src/api/index.js
+++ b/src/api/index.js
@@ -1,5 +1,5 @@
 import axios from "axios";
 
-const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:4000";
+const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:4000/api";

 const api = axios.create({
   baseURL: API_BASE,
@@ -20,6 +20,14 @@ export const deleteInvoice = (id) => api.delete(`/invoices/${id}`).then(r => r.data);
 
 /* ------------------ Parties ------------------ */
 export const fetchParties = () => api.get("/parties").then(r => r.data);
+export const fetchInvoice = (id) => api.get(`/invoices/${id}`).then(r => r.data);
+export const updateInvoice = (id, payload) => api.put(`/invoices/${id}`, payload).then(r => r.data);
+export const deleteInvoice = (id) => api.delete(`/invoices/${id}`).then(r => r.data);

 export const createParty = (payload) => api.post("/parties", payload).then(r => r.data);
 export const updateParty = (id, payload) => api.put(`/parties/${id}`, payload).then(r => r.data);
 
diff --git a/src/components/InvoiceForm.jsx b/src/components/InvoiceForm.jsx
index CCCCCCC..DDDDDDD 100644
--- a/src/components/InvoiceForm.jsx
+++ b/src/components/InvoiceForm.jsx
@@ -1,5 +1,5 @@
-import React, { useEffect, useState } from "react";
-import { fetchParties, fetchItems, createInvoice } from "../api";
+import React, { useEffect, useState } from "react";
+import { fetchParties, fetchItems, createInvoice, updateInvoice } from "../api";
 import { useNavigate } from "react-router-dom";
 
 export default function InvoiceForm(){
@@ -30,7 +30,20 @@ export default function InvoiceForm(){
     setRows(r => r.map((row,i)=> i===idx ? {...row, ...changes} : row));
   }
   function addRow(){ setRows(r => [...r, { item_id:'', qty:1, unit_price:0, discount:0 }]); }
-  function removeRow(idx){ setRows(r => r.filter((_,i) => i !== idx)); }
+  function removeRow(idx){ setRows(r => r.filter((_,i) => i !== idx)); }

+  function handleEditRow(idx, changes){
+    setRows(r => r.map((row,i)=> i===idx ? {...row, ...changes} : row));
+  }
+
+  async function save(){
+    if(!form.party_id) return alert('Choose party');
+    // validation
+    for (let i = 0; i < rows.length; i++){
+      const r = rows[i];
+      if(!r.item_id && !r.item_name) return alert(`Select item for row ${i+1}`);
+      if(!r.qty || Number(r.qty) <= 0) return alert(`Invalid quantity in row ${i+1}`);
+    }
+
+    const payload = {
+      ...form,
+      items: rows.map(r => ({
+        item_id: Number(r.item_id) || null,
+        qty: Number(r.qty),
+        unit_price: Number(r.unit_price || 0),
+        discount: Number(r.discount || 0),
+        item_name: r.item_name
+      }))
+    };
+
+    try{
+      if(form.id){
+        await updateInvoice(form.id, payload);
+        alert('Invoice updated');
+      } else {
+        await createInvoice(payload);
+        alert('Invoice created');
+      }
+      // after save: you might want to call onSave / navigate / close modal
+    }catch(err){
+      console.error('save invoice error:', err);
+      alert(err.response?.data?.error || err.message || 'Save failed');
+    }
+  }
diff --git a/src/pages/InvoicesPage.jsx b/src/pages/InvoicesPage.jsx
index EEEEEEE..FFFFFFF 100644
--- a/src/pages/InvoicesPage.jsx
+++ b/src/pages/InvoicesPage.jsx
@@ -1,5 +1,6 @@
 import React, { useState, useEffect } from "react";
+import { fetchInvoice, deleteInvoice } from "../api";
 import InvoiceForm from "../components/InvoiceForm";
 import AppLayout from "../components/AppLayout";
 import { fetchInvoices } from "../api";
@@ -40,7 +41,12 @@ export default function InvoicesPage() {
   function handleAdd(){
     setEditingInvoice(null);
     setModalOpen(true);
-  }
+  }
+
+  async function handleDelete(row){
+    if(!window.confirm('Delete invoice?')) return;
+    try{
+      await deleteInvoice(row.id);
+      loadInvoices();
+    }catch(err){
+      console.error('delete failed', err);
+      alert('Delete failed: ' + (err.response?.data?.error || err.message));
+    }
+  }
+
   async function handleEdit(row){
     try{
       const inv = await fetchInvoice(row.id);
